### Get available indices
GET /_cat/indices?v
Host: localhost:9200

### Get aliases
GET /_aliases
Host: localhost:9200
Content-Type: application/json

### Search one document in jaeger-main-jaeger-span-2025-05-30
GET /jaeger-main-jaeger-span-2025-05-30/_search
Host: localhost:9200


### Calculate call rate for the last 1 hour (1m step interval, looking back 10m, for last 1 hour)
GET /jaeger-span-*/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {"term": {"process.serviceName": "customer" }},
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "span.kind"}},
                  {"term": {"tags.value": "server"}}]}}}},
        {
            "range": {
            "startTimeMillis": {
                    "gte": "now-6h-10m",
                    "lte": "now",
                    "format": "epoch_millis"}}}]}
  },
  "aggs": {
    "requests_per_bucket": {
      "date_histogram": {
        "field": "startTimeMillis",
        "fixed_interval": "60s",
        "min_doc_count": 0,
        "extended_bounds": {
          "min": "now-6h-10m",
          "max": "now"
        }
      },
      "aggs": {
        "cumulative_requests": {
          "cumulative_sum": {
            "buckets_path": "_count"
          }
        },
        "rate_per_second": {
          "moving_fn": {
            "script": {
              "source": "if (values == null || values.length < 2) {  return 0.0; } double windowSizeSeconds = values.length * params.interval_ms / 1000.0; double firstVal = values[0];\ndouble lastVal = values[values.length - 1]; return (lastVal - firstVal) / windowSizeSeconds;",
              "lang": "painless",
              "params": {
                "window": 10,
                "interval_ms": 60000
              }
            },
            "buckets_path": "cumulative_requests",
            "window": 10}}}}}
}


### Calculate callrate for the last 1 hour (1m step interval, looking back 10m, for last 1 hour) groupedByOperation
GET /jaeger-span-*/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {"term": {"process.serviceName": "frontend"}},
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "span.kind"}},
                  {"term": {"tags.value": "server"}}]}}}},
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-6h",
              "lte": "now",
              "format": "epoch_millis"}}}]}
  },
  "aggs": {
    "operations": {
      "terms": {
        "field": "operationName",
        "size": 10
      },
      "aggs": {
        "requests_per_bucket": {
          "date_histogram": {
            "field": "startTimeMillis",
            "fixed_interval": "60s",
            "min_doc_count": 0,
            "extended_bounds": {
              "min": "now-6h-10m",
              "max": "now"
            }
          },
          "aggs": {
            "cumulative_requests": {
              "cumulative_sum": {
                "buckets_path": "_count"
              }
            },
            "rate_per_second": {
              "moving_fn": {
                "script": {
                  "source": "if (values == null || values.length < 2) return 0.0;\n\t\tdouble n = values.length; \n\t\tdouble sumX = 0.0;\n\t\tdouble sumY = 0.0;\n\t\tdouble sumXY = 0.0;\n\t\tdouble sumX2 = 0.0;\n\t\tfor (int i = 0; i < n; i++) { \n\t\t\tdouble x = i;\n\t\t\tdouble y = values[i];\n\t\t\tsumX += x;\n\t\t\tsumY += y;\n\t\t\tsumXY += x * y;\n\t\t\tsumX2 += x * x;\n\t\t} \n\t\tdouble numerator = n * sumXY - sumX * sumY;\n\t\tdouble denominator = n * sumX2 - sumX * sumX;\n\t\tif (Math.abs(denominator) < 1e-10) return 0.0;\n\t\tdouble slopePerBucket = numerator / denominator; \n\t\tdouble intervalSeconds = params.interval_ms / 1000.0;\n\t\treturn slopePerBucket / intervalSeconds;",
                  "lang": "painless",
                  "params": {
                    "window": 10,
                    "interval_ms": 60000
                  }
                },
                "buckets_path": "cumulative_requests",
                "window": 10}}}}}}}
}

### Filter service name
GET /jaeger-span-*/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 100,
  "query": {
    "bool": {
      "filter": [
        {"term": {"process.serviceName": "driver"}},
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "span.kind"}},
                  {"term": {"tags.value": "server"}}]}}}},
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-6h",
              "lte": "now",
              "format": "epoch_millis"}}}]}
  }
}

### Filter service by tags error and spankind
GET /jaeger-span-2025-06-11/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 10,
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "process.serviceName": "jaeger"
          }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "span.kind"}},
                  {"term": {"tags.value": "server" }}]}}}
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "error"}},
                  {"term": {"tags.value": true}}]}}}
        },
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-6h",
              "lte": "now",
              "format": "epoch_millis"
            }}}]}}
}

### Calculate getErrorRate for the last 1 hour (1m step interval, looking back 10m, for last 1 hour)
GET /jaeger-main-jaeger-span-2025-06-07/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 10,
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "process.serviceName": "driver"
          }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "span.kind"}},
                  {"term": {"tags.value": "server" }}]}}}
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "error"}},
                  {"term": {"tags.value": true}}]}}}
        },
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-6h",
              "lte": "now",
              "format": "epoch_millis"
            }}}]}
  },
  "aggs": {
    "requests_per_bucket": {
      "date_histogram": {
        "field": "startTimeMillis",
        "fixed_interval": "60s",
        "min_doc_count": 0,
        "extended_bounds": {
          "min": "now-6h-10m",
          "max": "now"
        }
      },
      "aggs": {
        "cumulative_requests": {
          "cumulative_sum": {
            "buckets_path": "_count"
          }
        },
        "rate_per_second": {
          "moving_fn": {
            "script": {
              "source": "if (values == null || values.length < 2) {  return 0.0; } double windowSizeSeconds = values.length * params.interval_ms / 1000.0; double firstVal = values[0];\ndouble lastVal = values[values.length - 1]; return (lastVal - firstVal) / windowSizeSeconds;",
              "lang": "painless",
              "params": {
                "window": 10,
                "interval_ms": 60000
              }
            },
            "buckets_path": "cumulative_requests",
            "window": 10
          }
        }
      }
    }
  }
}


### Calculate number of request grouped by operation
GET /jaeger-main-jaeger-span-2025-05-30/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 1,
  "query": {
    "bool": {
      "filter": [
        {"term": {"process.serviceName": "redis"}},
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "span.kind"}},
                  {"term": {"tags.value": "server"}}
                ]
              }
            }
          }
        },
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-6h-10m",
              "lte": "now",
              "format": "epoch_millis"}}}]}
  },
  "aggs": {
    "operations": {
      "terms": {
        "field": "operationName",
        "size": 10
      },
      "aggs": {
        "requests_per_bucket": {
          "date_histogram": {
            "field": "startTimeMillis",
            "fixed_interval": "60s",
            "min_doc_count": 0,
            "extended_bounds": {
              "min": "now-6h-10m",
              "max": "now"
            }
          },
          "aggs": {
            "cumulative_requests": {
              "cumulative_sum": {
                "buckets_path": "_count" }}}}}}}
}

### Calculate error rate for the last 1 hour (1m step interval, looking back 10m)
GET /jaeger-main-jaeger-span-2025-06-07/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {"term": {"process.serviceName": "driver"}},
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "span.kind"}},
                  {"term": {"tags.value": "server"}}]}}}},
        {
            "range": {
            "startTimeMillis": {
                    "gte": "now-6h-10m",
                    "lte": "now",
                    "format": "epoch_millis"}}}]}
  },
  "aggs": {
    "requests_per_bucket": {
      "date_histogram": {
        "field": "startTimeMillis",
        "fixed_interval": "60s",
        "min_doc_count": 0,
        "extended_bounds": {
          "min": "now-6h-10m",
          "max": "now"
        }
      },
      "aggs": {
        "error_count": {
          "filter": {
            "nested": {
              "path": "tags",
              "query": {
                "bool": {
                  "must": [
                    {"term": {"tags.key": "error"}},
                    {"term": {"tags.value": "true"}}
                  ]
                }
              }
            }
          }
        },
        "cumulative_requests": {
          "cumulative_sum": {
            "buckets_path": "_count"
          }
        },
        "cumulative_errors": {
          "cumulative_sum": {
            "buckets_path": "error_count._count"
          }
        }
      }
    }
  }
}


### Calculate percentile
GET /jaeger-main-jaeger-span-2025-06-06/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "process.serviceName": "frontend"
          }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {
                    "term": {
                      "tags.key": "span.kind"
                    }
                  },
                  {
                    "term": {
                      "tags.value": "server" }}]}}}
        },
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-20m",
              "lte": "now",
              "format": "epoch_millis" }}}]}
  },
  "aggs": {
    "minute_buckets": {
      "date_histogram": {
        "field": "startTimeMillis",
        "fixed_interval": "1m",
        "min_doc_count": 0,
        "extended_bounds": {
          "min": "now-20m",
          "max": "now"
        }
      },
      "aggs": {
        "percentiles_of_bucket": {
          "percentiles": {
            "field": "duration",
            "percents": [
              50, 95
            ]
          }
        },
        "percentiles_of_bucket_of_10m_window": {
          "moving_percentiles": {
            "buckets_path": "percentiles_of_bucket",
            "window": 10
          }
        }
      }
    }
  }
}



### Calculate percentile
GET /jaeger-main-jaeger-span-2025-06-06/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "process.serviceName": "frontend"
          }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {
                    "term": {
                      "tags.key": "span.kind"
                    }
                  },
                  {
                    "term": {
                      "tags.value": "server" }}]}}}
        },
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-20m",
              "lte": "now",
              "format": "epoch_millis" }}}]}
  },
  "aggs": {
    "minute_buckets": {
      "date_histogram": {
        "field": "startTimeMillis",
        "fixed_interval": "1m",
        "min_doc_count": 0,
        "extended_bounds": {
          "min": "now-20m",
          "max": "now"
        }
      },
      "aggs": {
        "percentiles_of_bucket": {
          "percentiles": {
            "field": "duration",
            "percents": [
              50, 95
            ]
          }
        },
        "percentiles_of_bucket_of_10m_window": {
          "moving_percentiles": {
            "buckets_path": "percentiles_of_bucket",
            "window": 10
          }
        }
      }
    }
  }
}

### Calculate percentile group by operation
GET /jaeger-main-jaeger-span-2025-06-07/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "process.serviceName": "redis"
          }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {"term": {"tags.key": "span.kind"}},
                  {"term": {"tags.value": "server" }}]}}}
        },
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-6h",
              "lte": "now",
              "format": "epoch_millis" }}}]}
  },
  "aggs": {
    "operations": {
      "terms": {
        "field": "operationName",
        "size": 10
      },
      "aggs": {
        "minute_buckets": {
          "date_histogram": {
            "field": "startTimeMillis",
            "fixed_interval": "1m",
            "min_doc_count": 0,
            "extended_bounds": {
              "min": "now-20m",
              "max": "now"
            }
          },
          "aggs": {
            "percentiles_of_bucket": {
              "percentiles": {
                "field": "duration",
                "percents": [
                  50, 95
                ]
              }
            },
            "percentiles_of_bucket_of_10m_window": {
              "moving_percentiles": {
                "buckets_path": "percentiles_of_bucket",
                "window": 10 }}}}}}}
}



### Calculate percentile
GET /jaeger-main-jaeger-span-2025-05-30/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 1,
  "_source": [
    "spanID",
    "operationName",
    "duration",
    "startTimeMillis"
  ],
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "process.serviceName": "redis"
          }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {
                    "term": {
                      "tags.key": "span.kind"
                    }
                  },
                  {
                    "term": {
                      "tags.value": "server"
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "range": {
            "startTimeMillis": {
              "gte": "now-20m",
              "lte": "now",
              "format": "epoch_millis"
            }
          }
        }
      ]
    }
  }
}

### Calculate percentile
GET /jaeger-span-*/_search
Host: localhost:9200
Content-Type: application/json

{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {
          "term": { "process.serviceName": "${service}" }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {
                    "term": {
                      "tags.key": "span.kind"
                    }
                  },
                  {
                    "term": {
                      "tags.value": "server"
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "range": {
            "startTimeMillis": {
              "format": "epoch_millis",
              "from": "now-6h",
              "include_lower": true,
              "include_upper": true,
              "to": "now"
            }
          }
        }
      ]
    }
  },
  "aggs": {
    "requests_per_bucket": {
      "date_histogram": {
        "extended_bounds": {
          "max": "now",
          "min": "now-6h"
        },
        "field": "startTimeMillis",
        "fixed_interval": "60000ms",
        "min_doc_count": 0
      },
      "aggs": {
        "percentiles_of_bucket": {
          "percentiles": {
            "field": "duration",
            "percents": [
              95
            ]
          }
        },
        "results": {
          "moving_fn": {
            "buckets_path": "percentiles_of_bucket[95.0]",
            "script": {
              "source": "double[] filtered = new double[values.length]; int size = 0; for (v in values) { if (!Double.isNaN(v)) filtered[size++] = v; } if (size == 0) return Double.NaN; Arrays.sort(filtered, 0, size); return filtered[(int) Math.min(Math.ceil(0.95 * (size - 1)), size - 1)]",
              "params": {
                "interval_ms": 60000,
                "window": 10
              },
              "lang": "painless"
            }
          }
        }
      }
    }
  }
}
### Calculate getCallRate

GET /jaeger-span-*/_search
Host: localhost:9200
Content-Type: application/json

{
  "aggregations": {
    "results_buckets": {
      "aggregations": {
        "date_histogram": {
          "aggregations": {
            "cumulative_requests": {
              "cumulative_sum": {
                "buckets_path": "_count"
              }
            },
            "results": {
              "moving_fn": {
                "buckets_path": "cumulative_requests",
                "script": {
                  "lang": "painless",
                  "params": {
                    "interval_ms": 60000,
                    "window": 10
                  },
                  "source": "if (values == null || values.length < 2) return 0.0; double n = values.length; double sumX = 0.0; double sumY = 0.0; double sumXY = 0.0; double sumX2 = 0.0; for (int i = 0; i < n; i++) { double x = i; double y = values[i]; sumX += x; sumY += y; sumXY += x * y; sumX2 += x * x; } double numerator = n * sumXY - sumX * sumY; double denominator = n * sumX2 - sumX * sumX; if (Math.abs(denominator) < 1e-10) return 0.0; double slopePerBucket = numerator / denominator; double intervalSeconds = params.interval_ms / 1000.0; return slopePerBucket / intervalSeconds;"
                },
                "window": 10
              }
            }
          },
          "date_histogram": {
            "extended_bounds": {
              "max": "now",
              "min": "now-24h"
            },
            "field": "startTimeMillis",
            "fixed_interval": "60000ms",
            "min_doc_count": 0
          }
        }
      },
      "terms": {
        "field": "operationName",
        "size": 10
      }
    }
  },
  "query": {
    "bool": {
      "filter": [
        {
          "terms": {
            "process.serviceName": [
              "frontend"
            ]
          }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {
                    "term": {
                      "tags.key": "span.kind"
                    }
                  },
                  {
                    "bool": {
                      "should": {
                        "term": {
                          "tags.value": "server"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "range": {
            "startTimeMillis": {
              "format": "epoch_millis",
              "from": "now-24h",
              "include_lower": true,
              "include_upper": true,
              "to": "now"
            }
          }
        }
      ]
    }
  },
  "size": 0
}


### Calculate getCallRate

GET /jaeger-span-*/_search
Host: localhost:9200
Content-Type: application/json

{
  "aggregations": {
    "results_buckets": {
      "aggregations": {
        "date_histogram": {
          "aggregations": {
            "cumulative_requests": {
              "cumulative_sum": {
                "buckets_path": "_count"
              }
            },
            "results": {
              "moving_fn": {
                "buckets_path": "cumulative_requests",
                "script": {
                  "lang": "painless",
                  "params": {
                    "interval_ms": 60000,
                    "window": 10
                  },
                  "source": "return 0.0;"
                },
                "window": 10
              }
            }
          },
          "date_histogram": {
            "extended_bounds": {
              "max": "now",
              "min": "now-24h"
            },
            "field": "startTimeMillis",
            "fixed_interval": "60000ms",
            "min_doc_count": 0
          }
        }
      },
      "terms": {
        "field": "operationName",
        "size": 10
      }
    }
  },
  "query": {
    "bool": {
      "filter": [
        {
          "terms": {
            "process.serviceName": [
              "frontend"
            ]
          }
        },
        {
          "nested": {
            "path": "tags",
            "query": {
              "bool": {
                "must": [
                  {
                    "term": {
                      "tags.key": "span.kind"
                    }
                  },
                  {
                    "bool": {
                      "should": {
                        "term": {
                          "tags.value": "server"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "range": {
            "startTimeMillis": {
              "format": "epoch_millis",
              "from": "now-24h",
              "include_lower": true,
              "include_upper": true,
              "to": "now"
            }
          }
        }
      ]
    }
  },
  "size": 0
}

